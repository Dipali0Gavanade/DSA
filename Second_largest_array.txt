Brute solution:-
 public static int largest(int[] arr){
       int second_largest=0;
       for(int i=arr.length-1;i>=1;i--){
          for(int j=0;j<=i-1;j++){
              if(arr[j]>arr[j+1])
              {
                  int temp=arr[j];
                  arr[j]=arr[j+1];
                  arr[j+1]=temp;
              }
          } 
       }
        for(int i=arr.length-2;i>=0;i--){
            if(arr[i]!=arr.length-1)
            {
                second_largest=arr[i]
                break;
            }
        }
        return  second_largest;
    }

Time Complexity: O(n^2+n) 
Space Complexity: O(1)


----------------xxxxxxxxxxxxxx------------------------xxxxxxxxxxxxxxxx-------------------xxxxxxxxxxxxxxxxxxxxxxxx--------------------xxxxxxxxxxxxxxxxxx----------------------
Better solution:-
 public static int largest(int[] arr){
       int largest=arr[0];
       for(int i=1;i<=arr.length-1;i++)
       {
           if(arr[i]>largest){
               largest=arr[i];
           }
       }
       int second_larg=-1;
       for(int i=0;i<=arr.length;i++)
       {
           if(arr[i]>second_larg && arr[i]!=largest){
               second_larg=arr[i];
           }
       }
       return second_larg;
    }

Time Complexity: O(2n) 
Space Complexity: O(1)


------------------xxxxxxxxxxx------------------xxxxxxxxxxxxxxxxxxx-----------------xxxxxxxxxxxx-------------xxxxxxxxxxxxxx-xxxxxxx--------------xxxxxxxxxxxx------------------

Optimal solution:-
 public int getSecondLargest(int[] arr) {
        int largest=arr[0];
        int second_largest=-1;
        for(int i=1;i<arr.length;i++){
            if(arr[i]>largest){
                second_largest=largest;
                largest=arr[i];
            }
            else if(arr[i]<largest&&arr[i]>second_largest)
            {
                second_largest=arr[i];
            }
        }
        return second_largest;
    }

Time Complexity: O(n) 
Space Complexity: O(1)
